Given a non-empty array of digits representing a non-negative integer, plus one to the integer.
The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.
You may assume the integer does not contain any leading zero, except the number 0 itself.
Input: [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Input: [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Input: [1,2,9,9]
Output: [1,3,0,0]
Input: [9]
Output: [1,0]

-------------------------------------------------------------------------------------------------------------

class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        
        /*
         * Brute Force Approach -- Using vector predefined methods
         */
        /*std::vector<int> result_vec;
        std::size_t index = 0, carry = 0;
        for (auto iter = digits.rbegin(); iter != digits.rend(); ++iter) {
            if (index == 0) {
                if (*iter < 9) {
                    result_vec.insert(result_vec.begin(), ((*iter) + 1));
                } else {
                    result_vec.insert(result_vec.begin(), 0);
                    carry = 1;
                }
            } else {
                if (carry == 0) {
                    result_vec.insert(result_vec.begin(), *iter);
                } else {
                    if (*iter < 9) {
                        result_vec.insert(result_vec.begin(), ((*iter) + 1));
                        carry = 0;
                    } else {
                        result_vec.insert(result_vec.begin(), 0);
                        carry = 1;
                    }
                }
            }
            ++index;
        }
        if (carry == 1) {
            result_vec.insert(result_vec.begin(), 1);
            carry = 0;
        }
        return result_vec;*/
        
        /*
         * Efficient Approach -- Using arithmetic operators
         */
        std::vector<int> result_vec(digits);
        
        result_vec.back() += 1; // Add 1 to last element of vector
        
        // Iterate through vector from back and add carry if applicable
        for (int i = result_vec.size() - 1; i > 0 && result_vec[i] == 10; --i) {
            result_vec[i] = 0;
            result_vec[i - 1] += 1;
        }
        
        // Check for first element of vector
        if (result_vec[0] == 10) {
            result_vec[0] = 1;
            result_vec.emplace_back(0); // Add 0 at end of the vector (Smart Solution)
        }
        
        return result_vec;
    }
};

-------------------------------------------------------------------------------------------------------------