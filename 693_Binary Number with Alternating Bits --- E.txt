Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.

Input: 5		Output: True		The binary representation of 5 is: 101
Input: 7		Output: False		The binary representation of 7 is: 111.
Input: 11		Output: False		The binary representation of 11 is: 1011.
Input: 10		Output: True		The binary representation of 10 is: 1010.

-------------------------------------------------------------------------------------------------------------

class Solution {
public:
    bool hasAlternatingBits(int n) {
        
        /*
         * Brute Force Approach -- Using bit-fiddling
         */
        /*int mask;
        if (n & 1) {
            mask = 1;
        } else {
            mask = 2;
        }
        while (n) {
            if ((n & ~(n - 1)) != mask) {
                return false;
            }
            
            n = n & (n - 1);
            mask <<= 2;
        }
        return true;*/
        
        /*
         * Efficient Approach -- Using less bitwise operators
         */
        int prev_bit = (n & 1);
        n >>= 1;
        
        while (n) {
            if ((n & 1) == prev_bit) return false;
            n >>= 1;
            prev_bit = !prev_bit;
        }
        return true;
    }
};

-------------------------------------------------------------------------------------------------------------