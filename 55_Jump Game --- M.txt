Given an array of non-negative integers, you are initially positioned at the first index of the array.
Each element in the array represents your maximum jump length at that position.
Determine if you are able to reach the last index.

Input: [2,3,1,1,4]  Output: true        Jump 1 step from index 0 to 1, then 3 steps to the last index.
Input: [3,2,1,0,4]  Output: false       You will always arrive at index 3 no matter what. Its maximum 
                                        jump length is 0, which makes it impossible to reach the last index.

-------------------------------------------------------------------------------------------------------------

class Solution {
public:
    bool canJump(vector<int>& nums) {
        
        /*
         * Efficient Approach -- Using furthest moved so far algorithm
         */
        int furthest_so_far = 0, prev_furthest = 0, min_steps_moved = -1, last_index = nums.size() - 1;
        
        for (int i = 0; i <= furthest_so_far && furthest_so_far < last_index; ++i) {
            prev_furthest = furthest_so_far;
            furthest_so_far = std::max(furthest_so_far, (i + nums[i]));
            if (prev_furthest != furthest_so_far) ++min_steps_moved;
        }
        
        if (furthest_so_far >= last_index) {
            std::cout << "Steps to reach to last index --> " << min_steps_moved << std::endl;
            return true;
        }
        
        return false;
    }
};

-------------------------------------------------------------------------------------------------------------