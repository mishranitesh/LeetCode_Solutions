Given a binary tree, return the preorder traversal of its nodes' values.
Input: [1,null,2,3]
   1
    \
     2
    /
   3
Output: [1,2,3]
[1,2,3,4] --> [1,2,4,3]
[1,2,3,4,5] --> [1,2,4,5,3]

-------------------------------------------------------------------------------------------------------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        if (root == nullptr) return std::vector<int>();
        
        // Local variable declaration
        std::vector<int> result_vals;
        std::stack<TreeNode *> stk_nodes;
        
        stk_nodes.push(root);
        
        while(!stk_nodes.empty()) {
            TreeNode *t_node = stk_nodes.top();
            result_vals.push_back(t_node->val);
            stk_nodes.pop();
            if (t_node->right != nullptr) {
                stk_nodes.push(t_node->right);
            }
            if (t_node->left != nullptr) {
                stk_nodes.push(t_node->left);
            }
        }
        
        return result_vals;
    }
};

-------------------------------------------------------------------------------------------------------------