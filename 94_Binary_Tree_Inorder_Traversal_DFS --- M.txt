Given a binary tree, return the inorder traversal of its nodes' values.
Input: [1,null,2,3]
   1
    \
     2
    /
   3
Output: [1,3,2]

-------------------------------------------------------------------------------------------------------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        
        if (root == nullptr) return std::vector<int>();
        
        // Local variable declarations
        std::vector<int> result_nodes;
        std::stack<TreeNode *> stk_nodes;
        bool go_right = false;
        
        // Push the root into stack
        stk_nodes.push(root);

        // Loop till stack is empty
        while (!stk_nodes.empty()) {
            TreeNode *top_node = stk_nodes.top();
            if (go_right) {
                // Process top stack node
                result_nodes.push_back(top_node->val);
                stk_nodes.pop();
                // Check for right node and push into stack
                if (top_node->right != nullptr) {
                    stk_nodes.push(top_node->right);
                    go_right = false;
                }
            } else {
                // Traverse till extreme left node and push into stack
                if (top_node->left != nullptr) {
                    stk_nodes.push(top_node->left);
                } else {
                    go_right = true;
                }
            }
        }
        return result_nodes;
    }
};

-------------------------------------------------------------------------------------------------------------