Given a string, find the length of the longest substring without repeating characters.
Examples:
	Given "abcabcbb", the answer is "abc", which the length is 3.
	Given "bbbbb", the answer is "b", with the length of 1.
	Given "pwwkew", the answer is "wke", with the length of 3.
	Note that the answer must be a substring, "pwke" is a subsequence and not a substring.

-------------------------------------------------------------------------------------------------------------

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if (s.length() == 0) return 0;
        
        // Local variable declaration
        std::string sub_str = "";
        int sub_str_len = 0, loop_cnt = 0;
        
        for (auto iter = s.begin(); iter != s.end(); ++iter) {
            char ch = *iter;
            if (sub_str.find(ch) == std::string::npos) { // Not Found then add in sub_str
                //std::cout << "A:: sub_str = " << sub_str << std::endl;
                sub_str.push_back(ch);
            } else { // Found then process
                //std::cout << "B:: sub_str = " << sub_str << std::endl;
                if (sub_str_len < sub_str.length()) {
                    sub_str_len = sub_str.length();
                }
                iter = s.begin() + loop_cnt;
                ++loop_cnt;
                sub_str.clear();
                //sub_str = "";
            }
        }
        
        if (sub_str_len < sub_str.length()) {
            sub_str_len = sub_str.length();
        }
        
        return sub_str_len;
    }
};

-------------------------------------------------------------------------------------------------------------