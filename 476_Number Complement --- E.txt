Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.
The given integer is guaranteed to fit within the range of a 32-bit signed integer.
You could assume no leading zero bit in the integerâ€™s binary representation.

Input: 5    Output: 2   The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
Input: 1    Output: 0   The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.

-------------------------------------------------------------------------------------------------------------

class Solution {
public:
    int findComplement(int num) {
        
        /*
         * Efficient Approach -- Using bitwise operators
         */
        int bits_cnt = static_cast<int>(floor(log2(num))) + 1, mask = 0;
        //int mask = (1 << bits_cnt) - 1; // Subtraction might be costly then below approach
        
        while (bits_cnt) {
            mask |= (1 << --bits_cnt);
        }
        
        return (num ^ mask);
    }
};

-------------------------------------------------------------------------------------------------------------