Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
Given nums = [2, 7, 11, 15], target = 9,
Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1]

[-1,-2,-3,-4,-5] , -8	--> [2,4]

[-3,4,3,90] , 0		--> [0,2]

-------------------------------------------------------------------------------------------------------------

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        std::map<int, int> my_map;
        for (int i = 0; i < nums.size(); ++i) {
            if (my_map.empty()) {
                my_map.insert(std::pair<int, int>(nums[i], i));
            } else {                
                auto find_iter = my_map.find(target - nums[i]);
                if (find_iter == my_map.end()) {
                    my_map.insert(std::pair<int, int>(nums[i], i));
                } else {
                    std::vector<int> ret_vec;
                    ret_vec.push_back(find_iter->second);
                    ret_vec.push_back(i);
                    return ret_vec;
                }
            }
        }
        std::cout << "Nitesh" << std::endl;
        for (auto it = my_map.begin(); it != my_map.end(); ++it) {
            std::cout << it->first << " " << it->second << std::endl;
        }
        return std::vector<int>();
    }
};

-------------------------------------------------------------------------------------------------------------