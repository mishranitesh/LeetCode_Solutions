Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:

Input: "()"
Output: true
Example 2:

Input: "()[]{}"
Output: true
Example 3:

Input: "(]"
Output: false
Example 4:

Input: "([)]"
Output: false
Example 5:

Input: "{[]}"
Output: true

-------------------------------------------------------------------------------------------------------------

class Solution {
public:
    bool isValid(string s) {
        
        if (s.length() == 0) return true;
        
        std::stack<char> stk;
        
        for (auto ch : s) {
            if (ch == '(' || ch == '[' || ch == '{') {
                stk.push(ch);
            } else {
                if (stk.empty()) return false;
                char p_ch = stk.top();
                if ((ch == ')' && (p_ch == '{' || p_ch == '['))
                        || (ch == '}' && (p_ch == '(' || p_ch == '['))
                        || (ch == ']' && (p_ch == '{' || p_ch == '('))) {
                    return false;
                }
                stk.pop();
            }
        }
        
        return stk.empty();
    }
};

-------------------------------------------------------------------------------------------------------------