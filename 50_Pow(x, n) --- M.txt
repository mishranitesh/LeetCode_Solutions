Implement pow(x, n), which calculates x raised to the power n (xn).

2.00000         10                  1024.00000
2.10000         3                   9.26100
2.00000         -2                  0.25000
1.00000         -2147483648         1
2.00000         -2147483648         0
-1.00000        -2147483648         1


-------------------------------------------------------------------------------------------------------------

class Solution {
public:
    double myPow(double x, int n) {
        
        // Variable declaration and initialization
        double result_pow = 1.0;
        
        // Change x and n when power is negative
        if (n < 0) {
            x = 1.0 / x;
            n *= -1;
        }
        
        std::cout << x << " " << n << " " << (n & 1) << std::endl;
        
        // Corner Case
        if (n == 0 || x == 1.0 || (x == -1.0 && !(n & 1))) return 1.0;
        if (n == 1 || (x == -1.0 && (n & 1))) return x;
        if (x != 1 && n == INT_MIN) return 0.0;
        
        /*
         * Brute Force Approach -- Using n time multiplication of x
         */
        /*
        while (n) {
            result_pow *= x;
            --n;
        }*/
        
        /*
         * Efficient Approach -- Using bitwise operators
         */
        while (n) {
            // Multiply result with x when LSB of power is 1
            if (n & 1) {
                result_pow *= x;
            }
            
            x *= x;
            n >>= 1;
        }
        
        return result_pow;
    }
};

-------------------------------------------------------------------------------------------------------------