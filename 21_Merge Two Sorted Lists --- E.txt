Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4

[2] [1] --> [1, 2]

-------------------------------------------------------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if (l1 == nullptr) return l2;
        if (l2 == nullptr) return l1;
        
        ListNode *ret_node = new ListNode(0);
        ListNode *t_node = ret_node;
        
        while (l1 != nullptr && l2 != nullptr) {
            if (l1->val <= l2->val) {
                t_node->next = l1;
                l1 = l1->next;
            } else {
                t_node->next = l2;
                l2 = l2->next;
            }
            t_node = t_node->next;
        }
        
        if (l1 == nullptr) {
            t_node->next = l2;
        } else {
            t_node->next = l1;
        }
        
        return ret_node->next;
    }
};


---------------
SLOW SOLUTION:-
---------------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if (l1 == nullptr) return l2;
        if (l2 == nullptr) return l1;
        
        ListNode *ret_node = nullptr, *t_node, *cur_node1 = l1, *cur_node2 = l2;
        
        while (cur_node1 != nullptr && cur_node2 != nullptr) {
            if (cur_node1->val <= cur_node2->val) {
                if (ret_node == nullptr) {
                    ret_node = new ListNode(cur_node1->val);
                    t_node = ret_node;
                    cur_node1 = cur_node1->next;
                    continue;
                }
                t_node->next = new ListNode(cur_node1->val);
                cur_node1 = cur_node1->next;
            } else {
                if (ret_node == nullptr) {
                    ret_node = new ListNode(cur_node2->val);
                    t_node = ret_node;
                    cur_node2 = cur_node2->next;
                    continue;
                }
                t_node->next = new ListNode(cur_node2->val);
                cur_node2 = cur_node2->next;
            }
            t_node = t_node->next;
        }
        
        if (cur_node1 == nullptr && cur_node2 != nullptr) {
            while (cur_node2 != nullptr) {
                t_node->next = new ListNode(cur_node2->val);
                cur_node2 = cur_node2->next;
                t_node = t_node->next;
            }
        }
        if (cur_node2 == nullptr && cur_node1 != nullptr) {
            while (cur_node1 != nullptr) {
                t_node->next = new ListNode(cur_node1->val);
                cur_node1 = cur_node1->next;
                t_node = t_node->next;
            }
        }
        
        return ret_node;
    }
};

-------------------------------------------------------------------------------------------------------------