Given an encoded string, return it's decoded string.
The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.
You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.
Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].

s = "3[a]2[bc]", return "aaabcbc".
s = "3[a2[c]]", return "accaccacc".
s = "2[abc]3[cd]ef", return "abcabccdcdcdef".
s = "10[nm]", return "nmnmnmnmnmnmnmnmnmnm"

-------------------------------------------------------------------------------------------------------------

class Solution {
public:
    string decodeString(string original_str) {
        // Corner case
        if (original_str.length() == 0) {
            return "";
        }
        
        // Other case
        std::string ret_str = "", temp_str = "";
        std::stack<string> str_stack;
        std::stringstream ss;
        
        // Loop through original string
        for (auto ch : original_str) {
            if (ch != ']') {
                if (isdigit(ch)) {
                    ss << ch;
                    continue;
                } else {
                    if (ss.str() != "") {
                        str_stack.push(ss.str());
                        ss.str("");
                    }
                    ss << ch;
                    str_stack.push(ss.str());
                    ss.str("");
                }
            } else if (ch == ']') {
            
                // Loop through stack
                while (!str_stack.empty()) {
                    if (str_stack.top() != "[") {
                        temp_str = str_stack.top() + temp_str;
                        str_stack.pop();
                        continue;
                    } else if (str_stack.top() == "[") {
                        str_stack.pop();
                        int rep_cnt = std::stoi(str_stack.top());
                        str_stack.pop();
                        
                        std::string prev_str = temp_str;
                        temp_str = "";
                        for (int i = 0; i < rep_cnt; ++i) {
                            temp_str += prev_str;
                        }
                        
                        if (str_stack.empty()) {
                            ret_str += temp_str;
                            temp_str = "";
                            break;
                        } else {
                            str_stack.push(temp_str);
                            temp_str = "";
                            break;
                        }
                    }
                }
            }
        }
        
        // Concate remaining string
        std::string t_str = "";
        while (!str_stack.empty()) {
            t_str = str_stack.top() + t_str;
            str_stack.pop();
        }
        
        return (ret_str + t_str);
    }
};

-------------------------------------------------------------------------------------------------------------