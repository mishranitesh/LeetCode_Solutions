Reverse bits of a given 32 bits unsigned integer.

Input: 43261596
Output: 964176192
Explanation: 43261596 represented in binary as 00000010100101000001111010011100, 
             return 964176192 represented in binary as 00111001011110000010100101000000.

-------------------------------------------------------------------------------------------------------------

class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
        
        /*
         * Brute Force Approach using Swap Bits at lsb and msb positions
         */
        int lsb = 0, msb = 31, swap_num;
        for (int i = 0; i < 16; ++i) {
            // LSB and MSB bits should differ before swapping them (as bits can only be 0 and 1)
            if ((n>>lsb & 1) != (n>>msb & 1)) {
                // Make number using left-shift operators and then XOR it with n to flip bits
                swap_num = (1<<lsb) | (1<<msb);
                n ^= swap_num;
            }
            ++lsb;
            --msb;
        }
        
        return n;
        
        /*
         * Efficient Approach can be implemented by cache
         * Divide 32 bits into 4 groups (8 bit each)
         * Create lookup table to store reverse integer for all 8-bit integers (256)
         * Reverse MSB 8-bits and place it to LSB respective 8-bits -- Repeat this 4 times
         */
    }
};

-------------------------------------------------------------------------------------------------------------